<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\LOCK_V853_V40.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\LOCK_V853_V40.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Tue Nov 12 10:05:52 2024
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ManagePower &rArr; CheckForSleep &rArr; ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[39]">CAU_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[33]">CMP0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[34]">CMP1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2b]">DAC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[32]">DMAMUX_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[11]">DMA_Channel0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[12]">DMA_Channel1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[13]">DMA_Channel2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[14]">DMA_Channel3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[15]">DMA_Channel4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[16]">DMA_Channel5_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[17]">DMA_Channel6_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[c]">EXTI0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[31]">EXTI10_15_IRQHandler</a> from gpio.o(.text.EXTI10_15_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[d]">EXTI1_IRQHandler</a> from gpio.o(.text.EXTI1_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[e]">EXTI2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[f]">EXTI3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[10]">EXTI4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[30]">EXTI5_9_IRQHandler</a> from gpio.o(.text.EXTI5_9_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[a]">FMC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4b]">HostCmdGetVer</a> from uart_to_host.o(.text.HostCmdGetVer) referenced from uart_to_host.o(.rodata.U1ByteCmds)
 <LI><a href="#[4a]">HostCmdIrCut</a> from uart_to_host.o(.text.HostCmdIrCut) referenced from uart_to_host.o(.rodata.U1ByteCmds)
 <LI><a href="#[49]">HostCmdPwrOff</a> from uart_to_host.o(.text.HostCmdPwrOff) referenced from uart_to_host.o(.rodata.U1ByteCmds)
 <LI><a href="#[48]">HostFeedDog</a> from uart_to_host.o(.text.HostFeedDog) referenced from uart_to_host.o(.rodata.U1ByteCmds)
 <LI><a href="#[26]">I2C0_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[25]">I2C0_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[35]">I2C0_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3d]">I2C1_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[36]">I2C2_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3f]">LPTIMER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[38]">LPUART_IRQHandler</a> from uart_to_lock.o(.text.LPUART_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3e]">LPUART_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[45]">PmuCmd</a> from uart_dbg.o(.text.PmuCmd) referenced from uart_dbg.o(.rodata.DbgUartCmds)
 <LI><a href="#[43]">PrintCmdChar</a> from uart_dbg.o(.text.PrintCmdChar) referenced from uart_dbg.o(.rodata.DbgUartCmds)
 <LI><a href="#[b]">RCU_CTC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[9]">RTC_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3b]">SLCD_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[29]">SPI0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[47]">SetPrint</a> from uart_dbg.o(.text.SetPrint) referenced from uart_dbg.o(.rodata.DbgUartCmds)
 <LI><a href="#[44]">ShowDevConfig</a> from uart_dbg.o(.text.ShowDevConfig) referenced from uart_dbg.o(.rodata.DbgUartCmds)
 <LI><a href="#[5]">SysTick_Handler</a> from systick.o(.text.SysTick_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_gd32l23x.o(.text.SystemInit) referenced from startup_gd32l23x.o(.text)
 <LI><a href="#[8]">TAMPER_STAMP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1e]">TIMER11_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1f]">TIMER5_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[20]">TIMER6_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1d]">TIMER8_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3a]">TRNG_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[46]">TestSndHost</a> from uart_dbg.o(.text.TestSndHost) referenced from uart_dbg.o(.rodata.DbgUartCmds)
 <LI><a href="#[23]">UART3_IRQHandler</a> from uart_to_host.o(.text.UART3_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[24]">UART4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[21]">USART0_IRQHandler</a> from uart_dbg.o(.text.USART0_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[37]">USART0_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3c]">USART1_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[19]">USBD_HP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1a]">USBD_LP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2f]">USBD_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32l23x.o(.text)
 <LI><a href="#[40]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[be]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bf]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USBD_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>CheckForSleep</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, pwr_manage.o(.text.CheckForSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckForSleep &rArr; ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
</UL>

<P><STRONG><a name="[52]"></a>CheckHostUart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_to_host.o(.text.CheckHostUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CheckHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrySndMcuDataToHost
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>CheckLockUart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart_to_lock.o(.text.CheckLockUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CheckLockUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>CheckTKeyBL</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.CheckTKeyBL))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>DbgUartService</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, uart_dbg.o(.text.DbgUartService))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DbgUartService &rArr; HandleCmd &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqDbgSndChar
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gpio.o(.text.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EXTI10_15_IRQHandler &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EXTI1_IRQHandler &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gpio.o(.text.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EXTI5_9_IRQHandler &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GpioInit</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, gpio.o(.text.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GpioInit &rArr; nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>HandleCmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uart_dbg.o(.text.HandleCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HandleCmd &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgUartService
</UL>

<P><STRONG><a name="[63]"></a>HandleHostCmd</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uart_to_host.o(.text.HandleHostCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HandleHostCmd &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartByte
</UL>

<P><STRONG><a name="[4b]"></a>HostCmdGetVer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart_to_host.o(.text.HostCmdGetVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HostCmdGetVer &rArr; ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_to_host.o(.rodata.U1ByteCmds)
</UL>
<P><STRONG><a name="[4a]"></a>HostCmdIrCut</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart_to_host.o(.text.HostCmdIrCut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HostCmdIrCut &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_to_host.o(.rodata.U1ByteCmds)
</UL>
<P><STRONG><a name="[49]"></a>HostCmdPwrOff</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart_to_host.o(.text.HostCmdPwrOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HostCmdPwrOff &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_to_host.o(.rodata.U1ByteCmds)
</UL>
<P><STRONG><a name="[48]"></a>HostFeedDog</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart_to_host.o(.text.HostFeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HostFeedDog &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_to_host.o(.rodata.U1ByteCmds)
</UL>
<P><STRONG><a name="[64]"></a>HostPwrDownSetPin</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pwr_manage.o(.text.HostPwrDownSetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HostPwrDownSetPin &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
</UL>

<P><STRONG><a name="[65]"></a>HostPwrUpSetPin</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pwr_manage.o(.text.HostPwrUpSetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HostPwrUpSetPin &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
</UL>

<P><STRONG><a name="[66]"></a>HostStartUpEnOut</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, pwr_manage.o(.text.HostStartUpEnOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HostStartUpEnOut &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
</UL>

<P><STRONG><a name="[67]"></a>InitHostUart</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, uart_to_host.o(.text.InitHostUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = InitHostUart &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>InitLockUart</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, uart_to_lock.o(.text.InitLockUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = InitLockUart &rArr; lpuart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_lpuart_clock_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_receive_config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_transmit_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_stop_bit_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_word_length_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_parity_config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_baudrate_set
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_deinit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_interrupt_enable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_wakeup_mode_config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_wakeup_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>InitPowerManage</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, pwr_manage.o(.text.InitPowerManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = InitPowerManage &rArr; SetPinForReducePwr &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrDownSetPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPinForReducePwr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>IrCutService</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, gpio.o(.text.IrCutService))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IrCutService &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>LPUART_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, uart_to_lock.o(.text.LPUART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPUART_IRQHandler &rArr; lpuart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_data_receive
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_data_transmit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_interrupt_flag_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_interrupt_disable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>LoadDevConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, option.o(.text.LoadDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LoadDevConfig &rArr; SaveDevConfig &rArr; fmc_program_check &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_default
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>LockReqSndHostData</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart_to_lock.o(.text.LockReqSndHostData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LockReqSndHostData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvLockUartService
</UL>

<P><STRONG><a name="[8c]"></a>ManagePower</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, pwr_manage.o(.text.ManagePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ManagePower &rArr; CheckForSleep &rArr; ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSleep
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakupRestore
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareToSleep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStartUpEnOut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrUpSetPin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrDownSetPin
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>PmuCmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uart_dbg.o(.text.PmuCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PmuCmd &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aToUShort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_dbg.o(.rodata.DbgUartCmds)
</UL>
<P><STRONG><a name="[94]"></a>PointNextRcv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart_to_host.o(.text.PointNextRcv))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartByte
</UL>

<P><STRONG><a name="[8d]"></a>PrepareToSleep</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pwr_manage.o(.text.PrepareToSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PrepareToSleep &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
</UL>

<P><STRONG><a name="[43]"></a>PrintCmdChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart_dbg.o(.text.PrintCmdChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrintCmdChar &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_dbg.o(.rodata.DbgUartCmds)
</UL>
<P><STRONG><a name="[91]"></a>PrintRcvHostData</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, uart_to_host.o(.text.PrintRcvHostData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrintRcvHostData &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqDbgSndChar
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartService
</UL>

<P><STRONG><a name="[92]"></a>PrintRcvLockData</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uart_to_lock.o(.text.PrintRcvLockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrintRcvLockData &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqDbgSndChar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvLockUartService
</UL>

<P><STRONG><a name="[93]"></a>RcvHostUartByte</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, uart_to_host.o(.text.RcvHostUartByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RcvHostUartByte &rArr; HandleHostCmd &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointNextRcv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndLockData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHostCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartService
</UL>

<P><STRONG><a name="[96]"></a>RcvHostUartService</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart_to_host.o(.text.RcvHostUartService))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RcvHostUartService &rArr; RcvHostUartByte &rArr; HandleHostCmd &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRcvHostData
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>RcvLockUartByte</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, uart_to_lock.o(.text.RcvLockUartByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RcvLockUartByte &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvLockUartService
</UL>

<P><STRONG><a name="[98]"></a>RcvLockUartService</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, uart_to_lock.o(.text.RcvLockUartService))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RcvLockUartService &rArr; RcvLockUartByte &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvLockUartByte
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockReqSndHostData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRcvLockData
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>ReqDbgSndChar</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart_dbg.o(.text.ReqDbgSndChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgUartService
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRcvLockData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRcvHostData
</UL>

<P><STRONG><a name="[51]"></a>ReqSndHostPacket</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uart_to_host.o(.text.ReqSndHostPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostUart
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrySndMcuDataToHost
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSleep
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSndHost
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCmdGetVer
</UL>

<P><STRONG><a name="[99]"></a>ReqSndHostUart</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart_to_host.o(.text.ReqSndHostUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostPacket
</UL>

<P><STRONG><a name="[89]"></a>SaveDevConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, option.o(.text.SaveDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SaveDevConfig &rArr; fmc_program_check &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program_check
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages_check
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDevConfig
</UL>

<P><STRONG><a name="[7f]"></a>SetPinForReducePwr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwr_manage.o(.text.SetPinForReducePwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SetPinForReducePwr &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
</UL>

<P><STRONG><a name="[47]"></a>SetPrint</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uart_dbg.o(.text.SetPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetPrint &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aToUShort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_dbg.o(.rodata.DbgUartCmds)
</UL>
<P><STRONG><a name="[44]"></a>ShowDevConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_dbg.o(.text.ShowDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ShowDevConfig &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_dbg.o(.rodata.DbgUartCmds)
</UL>
<P><STRONG><a name="[95]"></a>SndLockData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_to_host.o(.text.SndLockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SndLockData &rArr; lpuart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartByte
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, system_gd32l23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_16m_irc16m
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>TestSndHost</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_dbg.o(.text.TestSndHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestSndHost &rArr; ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_dbg.o(.rodata.DbgUartCmds)
</UL>
<P><STRONG><a name="[53]"></a>TrySndMcuDataToHost</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart_to_host.o(.text.TrySndMcuDataToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TrySndMcuDataToHost &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHostUart
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostPacket
</UL>

<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, uart_to_host.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART3_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, uart_dbg.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>UartDbgInit</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, uart_dbg.o(.text.UartDbgInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UartDbgInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>WeakupRestore</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, pwr_manage.o(.text.WeakupRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WeakupRestore &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
</UL>

<P><STRONG><a name="[90]"></a>aToUShort</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, uart_dbg.o(.text.aToUShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aToUShort
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmuCmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrint
</UL>

<P><STRONG><a name="[88]"></a>do_default</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, option.o(.text.do_default))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDevConfig
</UL>

<P><STRONG><a name="[86]"></a>exti_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32l23x_exti.o(.text.exti_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exti_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>exti_init</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, gd32l23x_exti.o(.text.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[5c]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32l23x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareToSleep
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32l23x_exti.o(.text.exti_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>fmc_erase_pages</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, option.o(.text.fmc_erase_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fmc_erase_pages &rArr; fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevConfig
</UL>

<P><STRONG><a name="[9b]"></a>fmc_erase_pages_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, option.o(.text.fmc_erase_pages_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fmc_erase_pages_check &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevConfig
</UL>

<P><STRONG><a name="[aa]"></a>fmc_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32l23x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[ac]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32l23x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[ab]"></a>fmc_page_erase</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gd32l23x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[9c]"></a>fmc_program</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, option.o(.text.fmc_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fmc_program &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevConfig
</UL>

<P><STRONG><a name="[9d]"></a>fmc_program_check</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, option.o(.text.fmc_program_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fmc_program_check &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevConfig
</UL>

<P><STRONG><a name="[a9]"></a>fmc_unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32l23x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[ae]"></a>fmc_word_program</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gd32l23x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
</UL>

<P><STRONG><a name="[69]"></a>gpio_af_set</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, gd32l23x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[5a]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrCutService
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStartUpEnOut
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrDownSetPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrCutService
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakupRestore
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStartUpEnOut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrUpSetPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32l23x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStartUpEnOut
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>gpio_mode_set</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, gd32l23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakupRestore
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareToSleep
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrUpSetPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPinForReducePwr
</UL>

<P><STRONG><a name="[5f]"></a>gpio_output_options_set</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gd32l23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrUpSetPin
</UL>

<P><STRONG><a name="[77]"></a>lpuart_baudrate_set</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gd32l23x_lpuart.o(.text.lpuart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lpuart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[82]"></a>lpuart_data_receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32l23x_lpuart.o(.text.lpuart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>lpuart_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>lpuart_deinit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd32l23x_lpuart.o(.text.lpuart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lpuart_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[7c]"></a>lpuart_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32l23x_lpuart.o(.text.lpuart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[85]"></a>lpuart_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>lpuart_interrupt_disable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>lpuart_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareToSleep
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndLockData
</UL>

<P><STRONG><a name="[81]"></a>lpuart_interrupt_flag_get</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gd32l23x_lpuart.o(.text.lpuart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lpuart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>lpuart_parity_config</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[78]"></a>lpuart_receive_config</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[75]"></a>lpuart_stop_bit_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[79]"></a>lpuart_transmit_config</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[7d]"></a>lpuart_wakeup_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32l23x_lpuart.o(.text.lpuart_wakeup_enable))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[7a]"></a>lpuart_wakeup_mode_config</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_wakeup_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_wakeup_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[74]"></a>lpuart_word_length_set</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_lpuart.o(.text.lpuart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpuart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[b3]"></a>m_pow</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uart_dbg.o(.text.m_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>

<P><STRONG><a name="[50]"></a>m_printf</STRONG> (Thumb, 966 bytes, Stack size 112 bytes, uart_dbg.o(.text.m_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pow
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqDbgSndChar
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrCutService
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLockUart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHostUart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgUartService
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDevConfig
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSleep
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakupRestore
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStartUpEnOut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPwrUpSetPin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages_check
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCmdChar
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmuCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDevConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrint
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvLockUartByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRcvLockData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRcvHostData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHostCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCmdGetVer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCmdIrCut
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCmdPwrOff
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostFeedDog
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqSndHostUart
</UL>

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; ManagePower &rArr; CheckForSleep &rArr; ReqSndHostPacket &rArr; ReqSndHostUart &rArr; m_printf &rArr; ReqDbgSndChar &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvLockUartService
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvHostUartService
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrCutService
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLockUart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHostUart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgUartService
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ldo_output_select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDevConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTKeyBL
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[62]"></a>nvic_irq_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gd32l23x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[a2]"></a>nvic_vector_table_set</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32l23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>pmu_ldo_output_select</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32l23x_pmu.o(.text.pmu_ldo_output_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pmu_ldo_output_select
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, gd32l23x_pmu.o(.text.pmu_to_deepsleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePower
</UL>

<P><STRONG><a name="[b0]"></a>rcu_clock_freq_get</STRONG> (Thumb, 1472 bytes, Stack size 128 bytes, gd32l23x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_baudrate_set
</UL>

<P><STRONG><a name="[72]"></a>rcu_lpuart_clock_config</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_lpuart_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_lpuart_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
</UL>

<P><STRONG><a name="[9e]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_clock_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPinForReducePwr
</UL>

<P><STRONG><a name="[68]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLockUart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerManage
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_deinit
</UL>

<P><STRONG><a name="[b1]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart_deinit
</UL>

<P><STRONG><a name="[60]"></a>syscfg_exti_line_config</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, gd32l23x_syscfg.o(.text.syscfg_exti_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscfg_exti_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[b4]"></a>systick_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>usart_baudrate_set</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, gd32l23x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[a4]"></a>usart_data_receive</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32l23x_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>usart_deinit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gd32l23x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[a8]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32l23x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[a6]"></a>usart_interrupt_disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>usart_interrupt_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReqDbgSndChar
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockReqSndHostData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrySndMcuDataToHost
</UL>

<P><STRONG><a name="[a3]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, gd32l23x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>usart_parity_config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[6f]"></a>usart_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[6c]"></a>usart_stop_bit_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[70]"></a>usart_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[6b]"></a>usart_word_length_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHostUart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDbgInit
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a1]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32l23x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_clock_config &rArr; system_clock_16m_irc16m
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_16m_irc16m
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b9]"></a>system_clock_16m_irc16m</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, system_gd32l23x.o(.text.system_clock_16m_irc16m))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_clock_16m_irc16m
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gd32l23x_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[b8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gd32l23x_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[ad]"></a>fmc_ready_wait</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd32l23x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[af]"></a>fmc_state_get</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, gd32l23x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[9f]"></a>SysTick_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[a0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
